buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
    maven { url 'https://repo.spring.io/milestone' }
}

sourceCompatibility = 19
targetCompatibility = 19

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'

    repositories {
        mavenCentral()
        flatDir {
            dirs 'libs'
        }
        maven { url 'https://repo.spring.io/milestone' }
    }
    bootJar {
        enabled false
    }
    jar {
        enabled true
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.24'
        annotationProcessor 'org.projectlombok:lombok:1.18.24'

        testCompileOnly 'org.projectlombok:lombok:1.18.24'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

        implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
        implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'
        implementation 'org.springframework.boot:spring-boot-starter-web:2.7.5'
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.7.5'
        implementation group: 'org.javamoney', name: 'moneta', version: '1.4.2'
        implementation 'com.google.code.gson:gson:2.8.2'
        implementation 'org.springframework.boot:spring-boot-starter-actuator:2.7.5'
        implementation 'org.springframework.boot:spring-boot-starter-webflux:2.7.5'

        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:3.1.4'
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server:3.1.4'

        testImplementation group: 'junit', name: 'junit', version: '4.13.2'
        testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.7.5'
    }

}

def jacocoToolVersion = '0.8.3'

dependencies {
    implementation name: 'GpsUtil', ext: 'jar'
    implementation "org.jacoco:org.jacoco.agent:${jacocoToolVersion}:runtime"
}

bootJar {
    enabled false
}

apply plugin: 'jacoco'

// -----------------------------------------------------------
//
// JaCoCo



jacoco {
    toolVersion = "${jacocoToolVersion}"
}

jacocoTestReport {
    dependsOn test
    sourceSets sourceSets.main
    executionData fileTree(project.rootDir).include("**/build/jacoco/*.exec")
    reports {
        xml.enabled false
        csv.enabled true
        html.destination file("${buildDir}/reports/jacoco/Html")
        csv.destination file("${buildDir}/reports/jacoco/jacoco.csv")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    testLogging.showStandardStreams = true
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}

test {
    systemProperties System.getProperties()

    finalizedBy jacocoTestReport
}

task jacocoMergeAll(type: JacocoMerge) {
    dependsOn(jacocoTestReport)
    subprojects.each { subproject ->
        // exclude common and integration subprojects
        if (subproject.name != 'integration' &&
                subproject.name != 'common') {
            executionData subproject.tasks.withType(Test)
        }
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(jacocoMergeAll)

    additionalSourceDirs.from =
            files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from =
            files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from =
            files(subprojects.sourceSets.main.output)
    executionData.from =
            files("${buildDir}/jacoco/jacocoMergeAll.exec")

    reports {
        html.enabled = true
        xml.enabled = false
    }
}
